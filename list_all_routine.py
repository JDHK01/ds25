#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
list_all_routine.py

遍历plan_manual.py中的coordinate_list，使用plan_pro_max.py分析后，
借助visual.py进行可视化分析并将图片保存到/picture文件夹。

Author: Generated by Claude Code
Date: 2025-08-01
"""

import os
import sys
from pathlib import Path

# 添加gc文件夹到Python路径
gc_path = os.path.join(os.path.dirname(__file__), 'gc')
sys.path.insert(0, gc_path)

# 导入必要的模块
from plan_manual import coordinate_list
from plan_pro_max import get_mapping_result
from visual import visualize_grid_navigation
import matplotlib.pyplot as plt

def ensure_picture_directory():
    """确保picture目录存在"""
    picture_dir = Path('./picture')
    picture_dir.mkdir(exist_ok=True)
    return picture_dir

def save_visualization(coord_set, index, route_path, picture_dir):
    """
    保存可视化图片
    
    参数:
    coord_set: 坐标集合（3个元素的列表）
    index: 索引编号
    route_path: 路径规划结果
    picture_dir: 图片保存目录
    """
    try:
        # 创建可视化图形
        fig, ax = visualize_grid_navigation(coord_set, route_path)
        
        # 设置图片标题，包含输入坐标信息
        coord_str = "_".join(coord_set)
        plt.suptitle(f'Route #{index+1}: {coord_str}', fontsize=16, fontweight='bold')
        
        # 保存图片
        filename = f'route_{index+1:03d}_{coord_str}.png'
        filepath = picture_dir / filename
        
        plt.savefig(filepath, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close(fig)  # 释放内存
        
        return filepath
        
    except Exception as e:
        print(f"保存图片时出错 (索引 {index}): {e}")
        return None

def analyze_coordinate_set(coord_set, index):
    """
    分析单个坐标集合
    
    参数:
    coord_set: 3个元素的坐标列表
    index: 索引编号
    
    返回:
    tuple: (路径规划结果, 分析信息)
    """
    print(f"\n处理第 {index+1} 个坐标集合: {coord_set}")
    
    # 使用plan_pro_max.py分析
    route_path = get_mapping_result(coord_set)
    
    if route_path is None:
        print(f"  ❌ 未找到对应的路径规划结果")
        return None, {"status": "failed", "reason": "no_mapping_found"}
    
    # 分析结果
    analysis_info = {
        "status": "success",
        "input_coordinates": coord_set,
        "path_length": len(route_path),
        "start_point": route_path[0] if route_path else None,
        "end_point": route_path[-1] if route_path else None,
        "unique_points": len(set(route_path)) if route_path else 0
    }
    
    print(f"  ✅ 路径规划成功")
    print(f"     路径长度: {analysis_info['path_length']} 个点")
    print(f"     起点: {analysis_info['start_point']}")
    print(f"     终点: {analysis_info['end_point']}")
    print(f"     独特点数: {analysis_info['unique_points']}")
    
    return route_path, analysis_info

def generate_summary_report(all_analyses, picture_dir):
    """
    生成总结报告
    
    参数:
    all_analyses: 所有分析结果的列表
    picture_dir: 图片保存目录
    """
    report_path = picture_dir / 'analysis_summary.txt'
    
    successful_analyses = [a for a in all_analyses if a['status'] == 'success']
    failed_analyses = [a for a in all_analyses if a['status'] == 'failed']
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("路径规划分析总结报告\n")
        f.write("=" * 50 + "\n\n")
        
        f.write(f"总处理数量: {len(all_analyses)}\n")
        f.write(f"成功数量: {len(successful_analyses)}\n")
        f.write(f"失败数量: {len(failed_analyses)}\n\n")
        
        if successful_analyses:
            f.write("成功案例统计:\n")
            f.write("-" * 30 + "\n")
            
            path_lengths = [a['path_length'] for a in successful_analyses]
            f.write(f"路径长度范围: {min(path_lengths)} - {max(path_lengths)}\n")
            f.write(f"平均路径长度: {sum(path_lengths) / len(path_lengths):.1f}\n\n")
            
            unique_points = [a['unique_points'] for a in successful_analyses]
            f.write(f"独特点数范围: {min(unique_points)} - {max(unique_points)}\n")
            f.write(f"平均独特点数: {sum(unique_points) / len(unique_points):.1f}\n\n")
        
        if failed_analyses:
            f.write("失败案例:\n")
            f.write("-" * 30 + "\n")
            for i, analysis in enumerate(failed_analyses, 1):
                f.write(f"{i}. {analysis.get('input_coordinates', 'Unknown')} - {analysis.get('reason', 'Unknown')}\n")
    
    print(f"\n📊 总结报告已保存至: {report_path}")

def main():
    """主函数"""
    print("开始处理coordinate_list中的所有坐标集合...")
    print(f"总共需要处理 {len(coordinate_list)} 个坐标集合")
    
    # 确保picture目录存在
    picture_dir = ensure_picture_directory()
    print(f"图片将保存到: {picture_dir.absolute()}")
    
    # 存储所有分析结果
    all_analyses = []
    successful_count = 0
    failed_count = 0
    
    # 遍历所有坐标集合
    for index, coord_set in enumerate(coordinate_list):
        try:
            # 分析坐标集合
            route_path, analysis_info = analyze_coordinate_set(coord_set, index)
            
            if route_path is not None:
                # 保存可视化图片
                saved_path = save_visualization(coord_set, index, route_path, picture_dir)
                if saved_path:
                    analysis_info['image_path'] = str(saved_path)
                    print(f"     图片已保存: {saved_path.name}")
                    successful_count += 1
                else:
                    analysis_info['status'] = 'visualization_failed'
                    failed_count += 1
            else:
                failed_count += 1
            
            all_analyses.append(analysis_info)
            
        except Exception as e:
            print(f"  ❌ 处理第 {index+1} 个坐标集合时出错: {e}")
            all_analyses.append({
                "status": "failed",
                "input_coordinates": coord_set,
                "reason": f"exception: {str(e)}"
            })
            failed_count += 1
        
        # 每处理10个显示进度
        if (index + 1) % 10 == 0:
            print(f"\n📈 进度: {index + 1}/{len(coordinate_list)} ({(index + 1)/len(coordinate_list)*100:.1f}%)")
    
    # 生成总结报告
    generate_summary_report(all_analyses, picture_dir)
    
    # 最终统计
    print("\n" + "="*60)
    print("处理完成！")
    print(f"总数量: {len(coordinate_list)}")
    print(f"成功: {successful_count}")
    print(f"失败: {failed_count}")
    print(f"成功率: {successful_count/len(coordinate_list)*100:.1f}%")
    print(f"图片保存位置: {picture_dir.absolute()}")
    print("="*60)

if __name__ == "__main__":
    main()